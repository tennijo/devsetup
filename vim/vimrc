" .vimrc file
" Created by Roman Zaynetdinov
" //github.com/zaynetro
"

" Use Vim settings, rather than Vi
set nocompatible

" Colorscheme
colorscheme Tomorrow-Night-Eighties
set background=dark

" Use OS clipboard for copy/paste
set clipboard=unnamed

" Set leader key binding
let mapleader=","

" Formatting options
set expandtab      " tabs are spaces
set tabstop=2      " number of visual spaces per tab
set softtabstop=2  " number of spaces in tab when editing
set shiftwidth=2   " number of columns to use for >< commands
filetype indent on " load filetype specific indent files

" Haskell files
autocmd FileType haskell setlocal tabstop=8 softtabstop=4 shiftwidth=4 shiftround

" Show line numbers
set number

" Highlight current line
set cursorline

" Redraw only when need to
set lazyredraw

" Highlight matching [{()}]
set showmatch

" Search as characters are entered
set incsearch

" Case-insensitive search
set ignorecase

" Highlight search results
set hlsearch

" Store vim tmp files in different directory
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" Set gnome terminal to 256 colors support
set t_Co=256

" fold based on syntax
set foldmethod=syntax
set foldlevelstart=1

" Quick escape
imap jk <ESC>

" Space open/closes folds
nnoremap <space> za

" Move between tabs easier
nnoremap <A-j> gT  " To the left
nnoremap <A-k> gt  " To the right

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Column 80 marker
" highlight OverLength ctermbg=red ctermfg=white guibg=#660000
" match OverLength /\%81v.\+/
if exists('+colorcolumn')
  set colorcolumn=80
endif

" Vundle
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'tpope/vim-sensible'       " Defaults everyone can agree on
Plugin 'godlygeek/tabular'        " Alignment
Plugin 'plasticboy/vim-markdown'
Plugin 'bling/vim-airline'        " Status/tabline
Plugin 'tpope/vim-surround'       " Quoting/parenthesizing
Plugin 'airblade/vim-gitgutter'   " Git gutter
Plugin 'pangloss/vim-javascript'  " Improved JavaScript indentation and syntax
Plugin 'fatih/vim-go'             " Go development
Plugin 'Valloric/YouCompleteMe'   " Autocompletion
Plugin 'nginx.vim'                " Highlights nginx configuration
Plugin 'scrooloose/nerdtree'      " Tree explorer
Plugin 'Xuyuanp/nerdtree-git-plugin' " Show git status in NERDTree
Plugin 'scrooloose/nerdcommenter' " Commenting
Plugin 'scrooloose/syntastic'     " Syntax checking hacks
Plugin 'junegunn/goyo.vim'        " Distraction free writing
Plugin 'tpope/vim-obsession'      " Continiously updated vim sessions
Plugin 'christoomey/vim-tmux-navigator' " Navigate between vim and tmux panes
Plugin 'mfukar/robotframework-vim' " Robot framework syntax

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"
" Plugin configurations
"

" == Vim sensible ==
" :set list   Makes whitespace chars visible


" == Tabular ==
" :Tabularize /,[/r1c1l0]   Aligns words separated by comma(,) in selected
"                           lines. l - left alignment, r - right, c - center.
"                           Number specifies how many spaces to insert.


" == Vim markdown ==
let g:vim_markdown_folding_disabled=1 " Markdown


" == Vim airline ==
" Integrates automatically


" == Vim surround ==
" Given: "Hello world"
"   Press cs"'   -> 'Hello world'
"   Press cs"<q> -> <q>Hello world</q>
"   Press ds"    -> Hello world


" == Git gutter ==
" Disable realtime check:
"   let g:gitgutter_realtime = 0
"   let g:gitgutter_eager = 0


" == Vim JavaScript ==
" Highligh html/css inside JS
let g:javascript_enable_domhtmlcss = 1


" == Vim Go ==
" :Gopath [path]  Override gopath
" :GoLink
" :GoDoc
" :GoDocBrowser
" :GoVet[!]  `go vet` (! - jump to first error)
" :GoDef [identifier]
" :GoTest[!]
" :GoTestFunc[!] [expand]
" :GoErrCheck
" :GoFiles  Show source files that depend on the current package
" :GoDeps
" :GoCallees  Show callees
" :GoCallers
" :GoChannelPeers  Show possible senders/receivers for the channel


" == YouCompleteMe ==
" Does not require specific commands
" :help youcompleteme


" == Nginx.cong ==
" :setfiletype nginx   To enable


" == NERDTree ==
" Type ? to see instant help
let NERDTreeShowHidden = 0
map <C-n> :NERDTreeToggle<CR>  " toggle NERDTree
" Do not override vim tmux navigator mappings
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'


" == NERDCommenter ==
" <leader>cc   Comment out current line or selected in visual mode
" <leader>ci   Toggle the comment state of the selected line(s)
" <leader>c$   Comments current line till the end of line
" <leader>cA   The same as <leader>c$ , but ends in insert mode
" <leader>cu   Uncomment the selected line(s)


" == Syntastic ==
" :lnext  Jump to next error
" :lprev  Jump to prev error
" :Errors  Show list of errors
" :SyntasticToggleMode  Toggle between active and passive modes
" :SyntasticCheck
" :SyntasticInfo
"
" Enable syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_auto_jump = 2

let g:syntastic_javascript_checkers = ['jshint']


" == Goyo ==
" :Goyo   To enable
" :Goyo [Width][XOffset][x[Height][YOffset]]
"   Ex: :Goyo 50x85% or :Goyo 50%+25%x50%-25%
" :Goyo!  To disable


" == Obsession ==
" :Obsess[ion] [file]   Start recording session
" :Obsess[ion]!         Stop and throw away
